{
  "_args": [
    [
      {
        "raw": "ninsuo/symfony-collection",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "ninsuo/symfony-collection",
        "spec": "github:ninsuo/symfony-collection",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ninsuo/symfony-collection.git",
          "sshUrl": "git+ssh://git@github.com/ninsuo/symfony-collection.git",
          "httpsUrl": "git+https://github.com/ninsuo/symfony-collection.git",
          "gitUrl": "git://github.com/ninsuo/symfony-collection.git",
          "shortcut": "github:ninsuo/symfony-collection",
          "directUrl": "https://raw.githubusercontent.com/ninsuo/symfony-collection/master/package.json"
        }
      },
      "C:\\Users\\TyreX\\Desktop\\Proxym\\PFE 2018\\symfony3.4"
    ]
  ],
  "_from": "ninsuo/symfony-collection",
  "_id": "symfony-collection@2.1.25",
  "_inCache": true,
  "_location": "/symfony-collection",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ninsuo/symfony-collection",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "ninsuo/symfony-collection",
    "spec": "github:ninsuo/symfony-collection",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ninsuo/symfony-collection.git",
      "sshUrl": "git+ssh://git@github.com/ninsuo/symfony-collection.git",
      "httpsUrl": "git+https://github.com/ninsuo/symfony-collection.git",
      "gitUrl": "git://github.com/ninsuo/symfony-collection.git",
      "shortcut": "github:ninsuo/symfony-collection",
      "directUrl": "https://raw.githubusercontent.com/ninsuo/symfony-collection/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/ninsuo/symfony-collection.git#077c253bed5a5bd145382591f517da7550266861",
  "_shasum": "bbc91d0238b19a5552d200e0ec4a9ee2142e0bbe",
  "_shrinkwrap": null,
  "_spec": "ninsuo/symfony-collection",
  "_where": "C:\\Users\\TyreX\\Desktop\\Proxym\\PFE 2018\\symfony3.4",
  "author": {
    "name": "Alain Tiemblo"
  },
  "bugs": {
    "url": "https://github.com/ninsuo/symfony-collection/issues"
  },
  "dependencies": {
    "jquery": ">=1.7",
    "jquery-ui": ">=1.0"
  },
  "description": "A jQuery plugin that manages adding, deleting and moving elements from a Symfony2 collection",
  "devDependencies": {},
  "gitHead": "077c253bed5a5bd145382591f517da7550266861",
  "homepage": "http://symfony-collection.fuz.org",
  "ignore": [
    "*",
    "!jquery.collection.js",
    "!jquery.collection.html.twig"
  ],
  "keywords": [
    "jquery",
    "symfony",
    "collection",
    "plugin",
    "javascript"
  ],
  "license": "MIT",
  "name": "symfony-collection",
  "optionalDependencies": {},
  "readme": "# symfony-collection\r\nA jQuery plugin that manages adding, deleting and moving elements from a Symfony collection\r\n\r\n![sample](http://ocarina.fr/medias/collection.png)\r\n\r\nThis is not really difficult to manage your collections using the `data-prototype` Symfony provides. But\r\nafter using several times collections, it appeared useful to me to create a jQuery plugin to do this job.\r\n\r\nThis is even more true when you need your elements to be moved up and down or added at a specific position: as the\r\nform will be proceeded using field names, we should swap field contents or field names instead of moving fields themselves to get the job done. That's\r\nnot really friendly in javascript, so this plugin also aims to deal with that.\r\n\r\n# Live demo\r\n\r\nDemo of this plugin is available live at: http://symfony-collection.fuz.org\r\n\r\nDemo source code is here: https://github.com/ninsuo/symfony-collection-demo\r\n\r\n# Installation\r\n\r\nThis plugin is a set of 2 files:\r\n\r\n- the jquery plugin itself, it should be located with your assets\r\n\r\n- a twig form theme that will ease use of it, it should be located in your views\r\n\r\n## Installation using Composer\r\n\r\nTo automate the plugin download and installation, edit composer.json and add:\r\n\r\n```json\r\n    \"require\": {\r\n        ...\r\n        \"ninsuo/symfony-collection\": \"dev-master\"\r\n    },\r\n    \"scripts\": {\r\n        \"post-install-cmd\": [\r\n            ...\r\n            \"Fuz\\\\Symfony\\\\Collection\\\\ScriptHandler::postInstall\"\r\n        ],\r\n        \"post-update-cmd\": [\r\n            ...\r\n            \"Fuz\\\\Symfony\\\\Collection\\\\ScriptHandler::postUpdate\"\r\n        ]\r\n    }\r\n```\r\nFiles will be automatically installed at:\r\n\r\n- symfony-collection form theme will be installed in `app/Resources/views`\r\n\r\n- symfony-collection jquery plugin will be installed in `web/js`.\r\n\r\nTips:\r\n\r\n- Replace `dev-master` by the current stable version.\r\n\r\n- Put script handlers before Symfony's installAssets if you wish to benefit from your assets optimizations.\r\n\r\n- Add `app/Resources/views/jquery.collection.html.twig` and `web/js/jquery.collection.js` to your `.gitignore`\r\n\r\nIf you prefer to install the plugin manually, you can use:\r\n\r\n```sh\r\ncomposer require ninsuo/symfony-collection\r\n```\r\n\r\nYou'll have to move:\r\n\r\n- `vendor/ninsuo/symfony-collection/jquery.collection.js` in your assets (for example in `web/js`)\r\n\r\n- `vendor/ninsuo/symfony-collection/jquery.collection.html.twig` in your views (for example in `app/Resources/views`)\r\n\r\n## Installation using npm\r\n\r\n```sh\r\nnpm install ninsuo/symfony-collection\r\n```\r\n\r\nYou'll have to move:\r\n\r\n- `node_modules/symfony-collection/jquery.collection.js` in your assets (for example in `web/js`).\r\n- `node_modules/symfony-collection/jquery.collection.html.twig` wherever you want in your views (for example in `app/Resources/views`)\r\n\r\n## Installation using Bower\r\n\r\n```sh\r\nbower install ninsuo/symfony-collection\r\n```\r\n\r\nYou'll have to move:\r\n\r\n- `bower_components/symfony-collection/jquery.collection.js` in your assets (for example in `web/js`)\r\n- `bower_components/symfony-collection/jquery.collection.html.twig` in your views (for example in `app/Resources/views`)\r\n\r\n# Basic usage\r\n\r\n## A simple collection\r\n\r\nYour collection type should contain `prototype`, `allow_add`, `allow_remove` options (depending on which buttons\r\nyou require of course). And a class that will be used as a selector to run the collection plugin.\r\n\r\n```php\r\n->add('myCollection', 'collection',\r\n   array (\r\n        // ...\r\n        'allow_add' => true,\r\n        'allow_remove' => true,\r\n        'prototype' => true,\r\n        'attr' => array(\r\n            'class' => 'my-selector',\r\n        ),\r\n))\r\n```\r\n\r\nThen, render your form after applying the given custom theme:\r\n\r\n```jinja\r\n     {% form_theme myForm 'jquery.collection.html.twig' %}\r\n     {{ form(myForm) }}\r\n```\r\n\r\nFinally, put the following code at the bottom of your page.\r\n\r\n```html\r\n    <script src=\"{{ asset('js/jquery.js') }}\"></script>\r\n    <script src=\"{{ asset('js/jquery.collection.js') }}\"></script>\r\n\r\n    <script type=\"text/javascript\">\r\n        $('.my-selector').collection();\r\n    </script>\r\n```\r\n\r\n## Using a form theme\r\n\r\nMost of the time, you will need to create a [form theme](https://symfony.com/doc/current/form/form_customization.html)\r\nthat will help you render your collection and its children in a fancy way.\r\n\r\n- in your form type(s), overwrite the `getBlockPrefix()` method and return a good name.\r\n\r\n```php\r\n// Fuz/AppBundle/Form/AddressType.php\r\n\r\n<?php\r\n\r\nnamespace Fuz\\AppBundle\\Form;\r\n\r\nuse Symfony\\Component\\Form\\AbstractType;\r\nuse Symfony\\Component\\Form\\FormBuilderInterface;\r\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\r\n\r\nclass AddressType extends AbstractType\r\n{\r\n    // ...\r\n\r\n    public function getBlockPrefix()\r\n    {\r\n        return 'AddressType';\r\n    }\r\n}\r\n```\r\n\r\n- in your form theme, you will just need to use the same name (`{% block AddressType_XXX %}`). Replace `XXX` by `widget`,\r\n`error` or `row` according to what you want to do (read the [Symfony doc](https://symfony.com/doc/current/form/form_customization.html)\r\nfor more details).\r\n\r\n```jinja\r\n{# FuzAppBundle:Advanced:addresses-theme.html.twig #}\r\n\r\n{% block AddressType_row %}\r\n<div class=\"col-md-3\">\r\n  {{ form_label(form) }}\r\n  {{ form_errors(form) }}\r\n  {{ form_widget(form) }}\r\n</div>\r\n{% endblock %}\r\n\r\n{% block AddressType_widget %}\r\n    {{ form_widget(form) }}\r\n    <br/>\r\n    <p class=\"text-center\">\r\n        <a href=\"#\" class=\"collection-up btn btn-default\">&lt;</a>\r\n        <a href=\"#\" class=\"collection-remove btn btn-default\">-</a>\r\n        <a href=\"#\" class=\"collection-add btn btn-default\">+</a>\r\n        <a href=\"#\" class=\"collection-down btn btn-default\">&gt;</a>\r\n    </p>\r\n{% endblock %}\r\n```\r\n\r\nThen, use both form themes using:\r\n\r\n```jinja\r\n     {%\r\n        form_theme myForm\r\n            'FuzAppBundle:Advanced:addresses-theme.html.twig'\r\n            'jquery.collection.html.twig'\r\n     %}\r\n```\r\n\r\nThere are many examples using form themes in the Advanced menu of the [demo website](http://symfony-collection.fuz.org/),\r\ndon't hesitate to look at them.\r\n\r\nAlways put `jquery.collection.html.twig` form theme below the other you use, to avoid that settings gets overwritten.\r\n\r\n## Using Doctrine, and a position explicitely stored in a field\r\n\r\nA collection is no more than an array of objects, so by default, this plugin move element positions\r\nin this array. For example, if you have A, B and C in your collection and move B up, it will contain\r\nB, A, C.\r\n\r\nBut when Doctrine will persist your collection, it will keep existing entities, and\r\nsimply update their content. For example, if you have a collection containing A, B, C\r\nwith ids 1, 2 and 3, you will end up with a collection containing B, A, C, but still\r\nids 1, 2 and 3.\r\n\r\nIn most cases, that's not a problem. But, if you have other relations attached to each of your\r\ncollection elements, you should never unlink id and value. You'll use a position field on your\r\ndatabase table, and it will manage position.\r\n\r\nSomething like:\r\n\r\n```php\r\n    /**\r\n     * @ORM\\Column(name=\"position\", type=\"integer\")\r\n     */\r\n    private $position;\r\n```\r\n\r\nThis plugin supports this case, you need to create a `position` field in your form (with hidden type),\r\nmapped to your entity, and give it a class that will serve as a selector:\r\n\r\n```php\r\n        $builder->add('position', HiddenType::class, [\r\n            'attr' => [\r\n                'class' => 'my-position',\r\n            ],\r\n        ]);\r\n```\r\n\r\nThen, use the `position_field_selector` option to provide it to the plugin:\r\n\r\n```js\r\n    $('.my-selector').collection({\r\n        position_field_selector: '.my-position'\r\n    });\r\n```\r\n\r\n## Several collections on the same page\r\n\r\nIf you wish to create several collections on the same page, you'll need to change the collection prefix\r\nin order for the plugin to trigger the right actions for the right collection.\r\n \r\nFor example:\r\n\r\n```js\r\n     $('.collectionA').collection({\r\n        'prefix': 'first-collection'\r\n     });\r\n\r\n     $('.collectionB').collection({\r\n        'prefix': 'second-collection'\r\n     });\r\n```\r\n\r\nThen if you want to edit those collections form theme, you'll need to replace\r\n`collection-add` by `first-collection-add` on your add buttons for exmaple.\r\n\r\n```html\r\n   <a href=\"#\" class=\"first-collection-add btn btn-default\">\r\n       <span class=\"glyphicon glyphicon-plus-sign\"></span>\r\n   </a>\r\n```\r\n\r\nSee [this sample](https://symfony-collection.fuz.org/symfony3/form-with-several-collections) for a working example.\r\n\r\n# Options\r\n\r\n**Customize rendered links** ([demo](http://symfony-collection.fuz.org/symfony3/options/customButtons))\r\n\r\nYou can customize displayed links by setting `up`, `down`, `add`, `remove`and `duplicate` options.\r\n\r\nDefault values are:\r\n\r\n```js\r\n     $('.collection').collection({\r\n         up: '<a href=\"#\">&#x25B2;</a>',\r\n         down: '<a href=\"#\">&#x25BC;</a>',\r\n         add: '<a href=\"#\">[ + ]</a>',\r\n         remove: '<a href=\"#\">[ - ]</a>',\r\n         duplicate: '<a href=\"#\">[ # ]</a>'\r\n     });\r\n```\r\n\r\nYou can also use following classes:\r\n\r\n- `collection-add` for an add button\r\n- `collection-remove` for a remove button\r\n- `collection-up` for a move up button\r\n- `collection-down` for a move down button\r\n- `collection-duplicate` for a duplicate button\r\n\r\nAnd:\r\n\r\n- `collection-action` for any of the above action\r\n- `collection-action-disabled` same, but when button is disabled (no \"up\" at the top, etc)\r\n\r\nNote that `collection` prefix can be changed using the `prefix` option.\r\n\r\n**Disable links** ([demo](http://symfony-collection.fuz.org/symfony3/options/enableButtons))\r\n\r\nYou can disable some buttons by using `allow_up`, `allow_down`, `allow_add`, `allow_remove`\r\nand `allow_duplicate` options. By default, all buttons except `duplicate` are enabled.\r\n\r\nFor example, if you do not want your elements to be moved up and down, use:\r\n\r\n```js\r\n     $('.collection').collection({\r\n         allow_up: false,\r\n         allow_down: false\r\n     });\r\n```\r\n\r\nIf you are using the given form theme, `allow_add`, `allow_remove` and `allow_duplicate` are automatically\r\nset following your form type configuration.\r\n\r\n**Set minimum and maximum of elements in the collection** ([demo](http://symfony-collection.fuz.org/symfony3/options/numberCollectionElements))\r\n\r\nYou can set the minimum of elements allowed in the collection by using the `min` option. By default, it is disabled (set to 0).\r\n\r\n```js\r\n     $('.collection').collection({\r\n         min: 0\r\n     });\r\n```\r\n\r\nYou can set the maximum of elements allowed in the collection by using the `max` option. By default, it is set to 100.\r\n\r\n```js\r\n     $('.collection').collection({\r\n         max: 100\r\n     });\r\n```\r\n\r\nYou can initialize your collection with a minimum of elements created (even if they do not exist on the data object) ([demo](http://symfony-collection.fuz.org/symfony3/options/givenMinimumElements)).\r\n\r\n```js\r\n     $('.collection').collection({\r\n         init_with_n_elements: 3\r\n     });\r\n```\r\n\r\n**Only one add button at the bottom** ([demo](http://symfony-collection.fuz.org/symfony3/options/addButtonAtTheBottom))\r\n\r\nIf you prefer having only one `add` button at the bottom of the collection instead of one add button per collection element, use the `add_at_the_end` option:\r\n\r\n```js\r\n     $('.collection').collection({\r\n         add_at_the_end: true\r\n     });\r\n```\r\n\r\n**Customise add button location** ([demo](http://symfony-collection.fuz.org/symfony3/options/buttons-custom-location))\r\n\r\nIf you want to set a specific location for your add button (not close to each collection element, nor at the bottom of the collection),\r\nyou can use the `custom_add_location` option.\r\n\r\nJS:\r\n```js\r\n        $('.collectionA').collection({\r\n            custom_add_location: true\r\n        });\r\n```\r\n\r\nHTML:\r\n```html\r\n        <button\r\n            data-collection=\"collectionA\"\r\n            class=\"collection-action collection-add btn btn-success\"\r\n        >Add element to collection</button>\r\n```\r\n\r\n**Hide useless buttons** ([demo](http://symfony-collection.fuz.org/symfony3/options/hideMoveUpDown))\r\n\r\nBy default, `move up` button is hidden on the first item, and `move down` button on the last one. You can make them appear\r\nanyway by setting `hide_useless_buttons` to `false`. This can be useful if you want to beautify them using CSS, for example.\r\n\r\n```js\r\n     $('.collection').collection({\r\n         hide_useless_buttons: true\r\n     });\r\n```\r\n\r\n**Events** ([demo](http://symfony-collection.fuz.org/symfony3/options/eventCallbacks))\r\n\r\nThere are `before_*` and `after_*` options that let you put callbacks before and after adding, deleting or moving\r\nelements in the collection.\r\n\r\n- `before_up`, `before_down`, `before_add` and `before_remove` are called before modifying the collection.\r\nThe modification will be cancelled if the callback you given returned `false`, and will proceed if it returned `true`\r\nor `undefined`.\r\n\r\n- `after_up`, `after_down`, `after_add` and `after_remove` are called after modifying the collection.\r\nThe modification will be reverted if the callback you given returned `false`.\r\n\r\n- `before_init` and `after_init` are called when a collection is initialized. No return value are expected.\r\n\r\nCallback functions receive 2 arguments:\r\n\r\n- `collection` references the div that contains your whole collection (the symfony2 field)\r\n\r\n- `element` is the element in the collection that have been added (or moved/deleted)\r\n\r\n```js\r\n     $('.collection').collection({\r\n         after_add: function(collection, element) {\r\n            // automatic backup or whatever\r\n            return true;\r\n         }\r\n     });\r\n```\r\n\r\n**Using the plugin without form theme** ([demo](http://symfony-collection.fuz.org/symfony3/options/withoutFormTheme))\r\n\r\nThe form theme aims to reduce the number of options required when activating the plugin. This is really useful\r\nwhen you are dealing with collections of form collections. But you can still do it manually if you want, using the\r\nfollowing equivalents:\r\n\r\n```js\r\n    $('.my-selector').collection({\r\n        prototype_name: '{{ myForm.myCollection.vars.prototype.vars.name }}',\r\n        allow_add: false,\r\n        allow_remove: false,\r\n        name_prefix:  '{{ myForm.myCollection.vars.full_name }}'\r\n    });\r\n```\r\n\r\nNote that only `name_prefix` option is mandatory, all other ones have default values.\r\n\r\n**Fade in & Fade out support** ([demo](http://symfony-collection.fuz.org/symfony3/options/fadeInFadeOut))\r\n\r\nBy defaut, when adding or removing an element, `fade` animation will make element movements smoother.\r\nYou can still disable this option by using `fade_in` and `fade_out` options.\r\n\r\n```js\r\n    $('.my-selector').collection({\r\n        fade_in: true,\r\n        fade_out: true\r\n    });\r\n```\r\n\r\n**Drag & drop support** ([demo](http://symfony-collection.fuz.org/symfony3/options/dragAndDrop))\r\n\r\nIf you are using Jquery UI and have the `sortable` component available in your application, the `drag_drop` option is\r\nautomatically enabled and let you change your element positions using drag & drop. You can disable this behavior by explicitely\r\nsetting `drag_drop` option to false.\r\n\r\nIf required, you can customize `sortable` by overloading options given to `jQuery.ui.sortable` using the `drag_drop_options` option.\r\n\r\nBy default, your collection is initialized with the following options:\r\n\r\n```js\r\n     $('.collection').collection({\r\n         drag_drop: true,\r\n         drag_drop_options: {\r\n            placeholder: 'ui-state-highlight'\r\n         }\r\n     });\r\n```\r\n\r\nNote that you should not overload `start` and `update` callbacks as they are used by this plugin, see\r\n`drag_drop_start` and `drag_drop_update` options in advanced usage below for more details.\r\n\r\n**Change the children selector**\r\n\r\nBy default, Symfony writes each element of a collection in a div below the collection itself. So\r\nthis plugin considers `> div` as a default value to get collection elements. But, you may need\r\nto display each element of your collection in a table, so you can change this value.\r\n\r\n```js\r\n     $('.collection').collection({\r\n        elements_selector: '> div'\r\n     });\r\n```\r\n\r\nYou may use `> tr`, `thead > tr` or more specifically `tr.item` or just `.item` if you set `class=\"item\"` at the top\r\nof your item's form theme. The goal is to reference each item in the collection whatever the markup.\r\n\r\n**Change the parent selector**\r\n\r\nTo be able to add elements to the collection, this plugin should be aware of the dom object that will contain them.\r\n\r\nBy default, your collection elements will be located just below your collection, for example:\r\n\r\n```html\r\n    <div id=\"collection\">\r\n       <div id=\"child_0\">(...)</div>\r\n       <div id=\"child_1\">(...)</div>\r\n       <div id=\"child_2\">(...)</div>\r\n    </div>\r\n```\r\n\r\nBut you may need to put elements deeper in the dom, for example when you put elements in a table:\r\n\r\n```html\r\n    <table id=\"collection\">\r\n        <tbody>\r\n            <tr id=\"child_0\">(...)</tr>\r\n            <tr id=\"child_1\">(...)</tr>\r\n            <tr id=\"child_2\">(...)</tr>\r\n        </tbody>\r\n    </table>\r\n```\r\n\r\nIn that example, parent selector should be `table.collection tbody`.\r\n\r\nNote that you can use `%id%` inside `elements_parent_selector`, it will be automatically replaced by the\r\ncollection's id. This is particularly useful when you're dealing with nested collections.\r\n\r\nExample:\r\n\r\n```js\r\n     $('.collection').collection({\r\n        // ...\r\n        children: [{\r\n            // ...\r\n            elements_parent_selector: '%id% tbody'\r\n        }]\r\n     });\r\n```\r\n\r\nDefault value:\r\n\r\n```js\r\n     $('.collection').collection({\r\n        elements_parent_selector: '%id%' // will be the collection itself\r\n     });\r\n```\r\n\r\n**Do not change field names**\r\n\r\nSymfony use field names to order the collection, not the position of each elements on the dom. \r\nSo by default, if you delete an element in the middle, all following elements will have their\r\nindex decreased of 1 (`field[3]` will become `field[2]` and so on) and if you add some elements \r\nin the middle, all subsequent elements will see their index increase to leave the space for the\r\nnew one.\r\n\r\nWith this implementation, you're sure to keep the right positions when clicking \"move up\" and \r\n\"move down\" for exmaple. But in some situations, you may not want to overwrite indexes, \r\nmost probably to maintain Doctrine relationships.\r\n\r\nSet the `preserve_names` option to `true` to never touch field names. But be aware that this\r\noption will disable `allow_up`, `allow_down`, `drag_drop` options and will enforce \r\n`add_at_the_end` to true.\r\n\r\nDefault value:\r\n\r\n```js\r\n     $('.collection').collection({\r\n        preserve_names: false\r\n     });\r\n```\r\n\r\n# Advanced usage\r\n\r\n**Changing action's positions** ([demo](http://symfony-collection.fuz.org/symfony3/advanced/customFormTheme))\r\n\r\nBy default :\r\n- `add`, `move up`, `move down` and `remove`are located in this order below each collection's element\r\n- `add` button can be located at the bottom of the collection using `add_at_the_bottom` option\r\n\r\nYou can change those button's positions by creating them manually anywhere in your form theme.\r\n\r\nYou can use any custom clickable element as soon has it has one action class:\r\n- `collection-add` for an `add` button\r\n- `collection-remove` for a `remove` button\r\n- `collection-up` for a `move up` button\r\n- `collection-down` for a `move down` button\r\n\r\n*Warning*: `collection` is taken from the `prefix` option: if you change the plugin's prefix, you should change this class too.\r\n\r\nExample:\r\n\r\nIf we have a collection of text fields and want to display actions at the right side of each value instead of below,\r\nwe will use something like this:\r\n\r\n```jinja\r\n{% block MyType_label %}{% endblock %}\r\n{% block MyType_errors %}{% endblock %}\r\n\r\n{% block MyType_widget %}\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-8\">\r\n            {{ form_widget(form.value) }}\r\n        </div>\r\n        <div class=\"col-md-2\">\r\n            <a href=\"#\" class=\"collection-up btn btn-default\">Move up</a>\r\n            <a href=\"#\" class=\"collection-down btn btn-default\">Move Down</a>\r\n        </div>\r\n        <div class=\"col-md-2\">\r\n            <a href=\"#\" class=\"collection-remove btn btn-default\">Remove</a>\r\n            <a href=\"#\" class=\"collection-add btn btn-default\">Add</a>\r\n        </div>\r\n    </div>\r\n\r\n{% endblock %}\r\n```\r\n\r\n*Note* : do not forget to set the `add` option when enabling the plugin, because if your collection is emptied,\r\nthe plugin will generate an `add` button based on the plugin's configuraiton.\r\n\r\n*Tip*: when `add` buttons are put inside collection's elements, new element is created next to the clicked\r\nelement instead of at the end of the collection.\r\n\r\n**Advanced drag & drop support** ([demo](http://symfony-collection.fuz.org/symfony3/options/dragAndDrop))\r\n\r\nIf you need to listen for `start` and/or `update` events from `jQuery.ui.sortable` in your collection,\r\nyou should not overload the `start` and `update` options in `drag_drop_options`, but use the built-in\r\n`drag_drop_start` and `drag_drop_update` options instead:\r\n\r\n```js\r\n     $('.collection').collection({\r\n         drag_drop_start: function (event, ui, elements, element) {\r\n            // ...\r\n         },\r\n         drag_drop_update: function (event, ui, elements, element) {\r\n            // ...\r\n         }\r\n     });\r\n```\r\n\r\nNotes:\r\n\r\n- `event` and `ui` come from `jQuery.ui.sortable` `start` callback.\r\n- `elements` contains all elements from the impacted collection\r\n- `element` is the moved element in the collection\r\n- If your callback return false, the position change will be cancelled/reverted.\r\n\r\n**Collection of collections** ([demo](http://symfony-collection.fuz.org/symfony3/advanced/collectionOfCollections))\r\n\r\nThis plugin has the ability to manage collection of form collections, but to avoid collisions, you should:\r\n\r\nIn your form type:\r\n\r\n- set a distinct `prototype_name` option and selector class for each of your collections\r\n\r\n```php\r\n    ->add('collections', 'collection',\r\n       array (\r\n            'type' => 'collection',\r\n            'label' => 'Add, move, remove collections',\r\n            'options' => array (\r\n                    'type' => 'text',\r\n                    'label' => 'Add, move, remove values',\r\n                    'options' => array (\r\n                            'label' => 'Value',\r\n                    ),\r\n                    'allow_add' => true,\r\n                    'allow_remove' => true,\r\n                    'prototype' => true,\r\n                    'prototype_name' => '__children_name__',\r\n                    'attr' => array (\r\n                            'class' => \"child-collection\",\r\n                    ),\r\n            ),\r\n            'allow_add' => true,\r\n            'allow_remove' => true,\r\n            'prototype' => true,\r\n            'prototype_name' => '__parent_name__',\r\n            'attr' => array (\r\n                    'class' => \"parent-collection\",\r\n            ),\r\n    ))\r\n```\r\n\r\nIn the plugin options:\r\n\r\n- use a distinct collection prefix, so clicking `add` button on a collection will add an item to the right collection\r\n\r\n- define children's selector in the `selector` attribute of `children` option (must select the root node of your children collections)\r\n\r\n```js\r\n     $('.parent-collection').collection({\r\n         prefix: 'parent',\r\n         children: [{\r\n             selector: '.child-collection',\r\n             prefix: 'child'\r\n             // ...\r\n         }]\r\n     });\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ninsuo/symfony-collection.git"
  },
  "version": "2.1.25"
}
